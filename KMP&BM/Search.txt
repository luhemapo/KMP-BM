Search algorithm

In computer science, a search algorithm is an algorithm (typically involving a multitude of other, 
more specific algorithms [1]) which solves a search problem. Search algorithms work to retrieve 
information stored within some data structure, or calculated in the search space of a problem domain, 
with either discrete or continuous values.

While the search problems described above and web search are both problems in information retrieval, 
they are generally studied as separate subfields and are solved and evaluated differently. 
Web search problems are generally focused on filtering and finding documents that are most 
relevant to human queries. Classic search algorithms are typically evaluated on how fast they can 
find a solution, and whether that solution is guaranteed to be optimal. Though information retrieval 
algorithms must be fast, the quality of ranking, and whether good results have been left out 
and bad results included, is more important.

The appropriate search algorithm often depends on the data structure being searched, 
and may also include prior knowledge about the data. Search algorithms can be made faster or 
more efficient by specially constructed database structures, such as search trees, hash maps, 
and database indexes.

Search algorithms can be classified based on their mechanism of searching into three types of algorithms: 
linear, binary, and hashing. 
Linear search algorithms check every record for the one associated with a target key in a linear fashion. 
Binary, or half-interval, searches repeatedly target the center of the search structure and divide the search 
space in half. 
Comparison search algorithms improve on linear searching by successively eliminating records based on 
comparisons of the keys until the target record is found, and can be applied on data structures 
with a defined order.
Digital search algorithms work based on the properties of digits in data structures that use numerical keys.
Finally, hashing directly maps keys to records based on a hash function.

Algorithms are often evaluated by their computational complexity, or maximum theoretical run time. 
Binary search functions, for example, have a maximum complexity of O(log n), or logarithmic time. 
This means that the maximum number of operations needed to find the search target is a logarithmic 
function of the size of the search space.